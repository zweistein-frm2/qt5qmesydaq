/*----- PROTECTED REGION ID(ImageChannelClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        ImageChannelClass.h
//
// description : Include for the ImageChannel root class.
//               This class is the singleton class for
//                the ImageChannel device class.
//               It contains all properties and methods which the 
//               ImageChannel requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ImageChannelClass_H
#define ImageChannelClass_H

#include <tango.h>
#include "../mlzdevice/MLZDeviceClass.h"
#include "../detectorchannel/DetectorChannelClass.h"
#include "ImageChannel.h"


/*----- PROTECTED REGION END -----*/	//	ImageChannelClass.h


namespace ImageChannel_ns
{
/*----- PROTECTED REGION ID(ImageChannelClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	ImageChannelClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute preselection class definition
class preselectionAttrib: public Tango::Attr
{
public:
	preselectionAttrib():Attr("preselection",
			Tango::DEV_ULONG64, Tango::READ_WRITE) {};
	~preselectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_preselection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ImageChannel *>(dev))->write_preselection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_preselection_allowed(ty);}
};

//	Attribute detectorSize class definition
class detectorSizeAttrib: public Tango::SpectrumAttr
{
public:
	detectorSizeAttrib():SpectrumAttr("detectorSize",
			Tango::DEV_ULONG, Tango::READ, 10) {};
	~detectorSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_detectorSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_detectorSize_allowed(ty);}
};

//	Attribute roiOffset class definition
class roiOffsetAttrib: public Tango::SpectrumAttr
{
public:
	roiOffsetAttrib():SpectrumAttr("roiOffset",
			Tango::DEV_ULONG, Tango::READ_WRITE, 10) {};
	~roiOffsetAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_roiOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ImageChannel *>(dev))->write_roiOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_roiOffset_allowed(ty);}
};

//	Attribute roiSize class definition
class roiSizeAttrib: public Tango::SpectrumAttr
{
public:
	roiSizeAttrib():SpectrumAttr("roiSize",
			Tango::DEV_ULONG, Tango::READ_WRITE, 10) {};
	~roiSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_roiSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ImageChannel *>(dev))->write_roiSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_roiSize_allowed(ty);}
};

//	Attribute binning class definition
class binningAttrib: public Tango::SpectrumAttr
{
public:
	binningAttrib():SpectrumAttr("binning",
			Tango::DEV_ULONG, Tango::READ_WRITE, 10) {};
	~binningAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_binning(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ImageChannel *>(dev))->write_binning(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_binning_allowed(ty);}
};

//	Attribute zeroPoint class definition
class zeroPointAttrib: public Tango::SpectrumAttr
{
public:
	zeroPointAttrib():SpectrumAttr("zeroPoint",
			Tango::DEV_ULONG, Tango::READ, 10) {};
	~zeroPointAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_zeroPoint(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_zeroPoint_allowed(ty);}
};

//	Attribute value class definition
class valueAttrib: public Tango::SpectrumAttr
{
public:
	valueAttrib():SpectrumAttr("value",
			Tango::DEV_ULONG, Tango::READ, 16777216) {};
	~valueAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ImageChannel *>(dev))->read_value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ImageChannel *>(dev))->is_value_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command GetBlock class definition
class GetBlockClass : public Tango::Command
{
public:
	GetBlockClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetBlockClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetBlockClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ImageChannel *>(dev))->is_GetBlock_allowed(any);}
};


/**
 *	The ImageChannelClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  ImageChannelClass : public DetectorChannel_ns::DetectorChannelClass
#else
class ImageChannelClass : public DetectorChannel_ns::DetectorChannelClass
#endif
{
	/*----- PROTECTED REGION ID(ImageChannelClass::Additionnal DServer data members) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	ImageChannelClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static ImageChannelClass *init(const char *);
		static ImageChannelClass *instance();
		~ImageChannelClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		ImageChannelClass(string &);
		static ImageChannelClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	ImageChannel_H
