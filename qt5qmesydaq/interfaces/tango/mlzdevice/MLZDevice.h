/*----- PROTECTED REGION ID(MLZDevice.h) ENABLED START -----*/
//=============================================================================
//
// file :	MLZDevice.h
//
// description : Include file for the MLZDevice class
//
// project :     MLZ Base Device
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MLZDevice_H
#define MLZDevice_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	MLZDevice.h

/**
 *  MLZDevice class description:
 *    This is the root of the abstract base class inheritance tree.
 */

namespace MLZDevice_ns
{
/*----- PROTECTED REGION ID(MLZDevice::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	MLZDevice::Additional Class Declarations

class MLZDevice : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MLZDevice::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	MLZDevice::Data Members


//	Attribute data members
public:
	Tango::DevString	*attr_version_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MLZDevice(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MLZDevice(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MLZDevice(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~MLZDevice() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MLZDevice::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute version related methods
 *	Description: This attribute contains the version of the device class and its parent classes (recursively). The format is "module1 version1, module2 version2, ...".
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_version(Tango::Attribute &attr);
	virtual bool is_version_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : MLZDevice::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command On related method
	 *	Description: Switches the main function of the device on.
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: Switches the main function of the device off.
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command GetProperties related method
	 *	Description: Returns a string list of properties and their values, in the form [prop1, val1, prop2, val2, ...].
	 *
	 *	@returns
	 */
	virtual Tango::DevVarStringArray *get_properties();
	virtual bool is_GetProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command SetProperties related method
	 *	Description: Set properties on the device. The argument must have the same form as the return value of "GetProperties", but not all properties have to be present.
	 *
	 *	@param argin
	 *	@returns True if the properties were saved persistently, False if they were only set for the current session.
	 */
	virtual Tango::DevBoolean set_properties(const Tango::DevVarStringArray *argin);
	virtual bool is_SetProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Resets the device to overcome a FAULT state.
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : MLZDevice::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(MLZDevice::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	MLZDevice::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MLZDevice::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	MLZDevice::Additional Classes Definitions

}	//	End of namespace

#endif   //	MLZDevice_H
