/*----- PROTECTED REGION ID(MLZDeviceStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :	MLZDeviceStateMachine.cpp
//
// description : State machine file for the MLZDevice class
//
// project :     MLZ Base Device
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//=============================================================================

#include "MLZDevice.h"

/*----- PROTECTED REGION END -----*/	//	MLZDevice::MLZDeviceStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  The main function of the device is on and ready.
//  OFF      |  The main function of the device is off.
//  MOVING   |  The hardware is moving (in case of a motor for example), or the detector is acquiring.
//  FAULT    |  An error occurred which could not been handled.
//           |  
//           |  This can be a hardware error, a communication error or even a programming error.
//  INIT     |  The device is initializing the communication to the hardware and the hardware itself.
//  ALARM    |  The alarm was caused because of reaching limits, dangerous position or similar circumstances.
//  UNKNOWN  |  The device state cannot be interpreted, so it is unkown.


namespace MLZDevice_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_version_allowed()
 *	Description : Execution allowed for version attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_version_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for version attribute in read access.
	/*----- PROTECTED REGION ID(MLZDevice::versionStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	MLZDevice::versionStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_On_allowed()
 *	Description : Execution allowed for On attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_On_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(MLZDevice::OnStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	MLZDevice::OnStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_Off_allowed()
 *	Description : Execution allowed for Off attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_Off_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::INIT)
	{
	/*----- PROTECTED REGION ID(MLZDevice::OffStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	MLZDevice::OffStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_GetProperties_allowed()
 *	Description : Execution allowed for GetProperties attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_GetProperties_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for GetProperties command.
	/*----- PROTECTED REGION ID(MLZDevice::GetPropertiesStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	MLZDevice::GetPropertiesStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_SetProperties_allowed()
 *	Description : Execution allowed for SetProperties attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_SetProperties_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(MLZDevice::SetPropertiesStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	MLZDevice::SetPropertiesStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MLZDevice::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool MLZDevice::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(MLZDevice::ResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MLZDevice::ResetStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(MLZDevice::MLZDeviceStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	MLZDevice::MLZDeviceStateAllowed.AdditionalMethods

}	//	End of namespace
