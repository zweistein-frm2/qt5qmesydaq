/*----- PROTECTED REGION ID(DetectorChannelStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        DetectorChannelStateMachine.cpp
//
// description : State machine file for the DetectorChannel class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <DetectorChannel.h>

/*----- PROTECTED REGION END -----*/	//	DetectorChannel::DetectorChannelStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  The main function of the device is on and ready.
//  OFF      |  The main function of the device is off.
//  MOVING   |  The hardware is moving (in case of a motor for example), or the detector is acquiring.
//  FAULT    |  An error occurred which could not been handled.
//           |  
//           |  This can be a hardware error, a communication error or even a programming error.
//  INIT     |  The device is initializing the communication to the hardware and the hardware itself.
//  ALARM    |  The alarm was caused because of reaching limits, dangerous position or similar circumstances.
//  UNKNOWN  |  The device state cannot be interpreted, so it is unkown.


namespace DetectorChannel_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_active_allowed()
 *	Description : Execution allowed for active attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_active_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF ||
			get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::UNKNOWN)
		{
		/*----- PROTECTED REGION ID(DetectorChannel::activeStateAllowed_WRITE) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	DetectorChannel::activeStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::INIT ||
			get_state()==Tango::UNKNOWN)
		{
		/*----- PROTECTED REGION ID(DetectorChannel::activeStateAllowed_READ) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	DetectorChannel::activeStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_Start_allowed()
 *	Description : Execution allowed for Start attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_Start_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(DetectorChannel::StartStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::StartStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_Stop_allowed()
 *	Description : Execution allowed for Stop attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_Stop_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(DetectorChannel::StopStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::StopStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_Clear_allowed()
 *	Description : Execution allowed for Clear attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_Clear_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(DetectorChannel::ClearStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::ClearStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_Resume_allowed()
 *	Description : Execution allowed for Resume attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_Resume_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(DetectorChannel::ResumeStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::ResumeStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DetectorChannel::is_Prepare_allowed()
 *	Description : Execution allowed for Prepare attribute
 */
//--------------------------------------------------------
bool DetectorChannel::is_Prepare_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::INIT ||
		get_state()==Tango::UNKNOWN)
	{
	/*----- PROTECTED REGION ID(DetectorChannel::PrepareStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::PrepareStateAllowed
		return false;
	}
	return true;
}


/*----- PROTECTED REGION ID(DetectorChannel::DetectorChannelStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	DetectorChannel::DetectorChannelStateAllowed.AdditionalMethods

}	//	End of namespace
