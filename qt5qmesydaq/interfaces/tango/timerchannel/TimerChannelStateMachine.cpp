/*----- PROTECTED REGION ID(TimerChannelStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TimerChannelStateMachine.cpp
//
// description : State machine file for the TimerChannel class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <TimerChannel.h>

/*----- PROTECTED REGION END -----*/	//	TimerChannel::TimerChannelStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  The main function of the device is on and ready.
//  OFF      |  The main function of the device is off.
//  MOVING   |  The hardware is moving (in case of a motor for example), or the detector is acquiring.
//  FAULT    |  An error occurred which could not been handled.
//           |  
//           |  This can be a hardware error, a communication error or even a programming error.
//  INIT     |  The device is initializing the communication to the hardware and the hardware itself.
//  ALARM    |  The alarm was caused because of reaching limits, dangerous position or similar circumstances.
//  UNKNOWN  |  The device state cannot be interpreted, so it is unkown.


namespace TimerChannel_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::is_preselection_allowed()
 *	Description : Execution allowed for preselection attribute
 */
//--------------------------------------------------------
bool TimerChannel::is_preselection_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF ||
			get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::UNKNOWN)
		{
		/*----- PROTECTED REGION ID(TimerChannel::preselectionStateAllowed_WRITE) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	TimerChannel::preselectionStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::INIT ||
			get_state()==Tango::UNKNOWN)
		{
		/*----- PROTECTED REGION ID(TimerChannel::preselectionStateAllowed_READ) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	TimerChannel::preselectionStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::is_value_allowed()
 *	Description : Execution allowed for value attribute
 */
//--------------------------------------------------------
bool TimerChannel::is_value_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::INIT ||
			get_state()==Tango::UNKNOWN)
		{
		/*----- PROTECTED REGION ID(TimerChannel::valueStateAllowed_READ) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	TimerChannel::valueStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================


/*----- PROTECTED REGION ID(TimerChannel::TimerChannelStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	TimerChannel::TimerChannelStateAllowed.AdditionalMethods

}	//	End of namespace
