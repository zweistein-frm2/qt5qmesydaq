/*----- PROTECTED REGION ID(TimerChannel.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TimerChannel.cpp
//
// description : C++ source for the TimerChannel class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TimerChannel are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TimerChannel.h>
#include <TimerChannelClass.h>

#include "QMesydaqDetectorInterface.h"
#include "mdefines.h"

/*----- PROTECTED REGION END -----*/	//	TimerChannel.cpp

/**
 *  TimerChannel class description:
 *    Base class for channels that control measurement time.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name   |  Method name
//================================================================
//  State          |  Inherited (no method)
//  Status         |  Inherited (no method)
//  On             |  Inherited (no method)
//  Off            |  Inherited (no method)
//  GetProperties  |  Inherited (no method)
//  SetProperties  |  Inherited (no method)
//  Reset          |  Inherited (no method)
//  Start          |  Inherited (no method)
//  Stop           |  Inherited (no method)
//  Clear          |  Inherited (no method)
//  Resume         |  Inherited (no method)
//  Prepare        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  version       |  Tango::DevString	Scalar
//  active        |  Tango::DevBoolean	Scalar
//  preselection  |  Tango::DevDouble	Scalar
//  value         |  Tango::DevDouble	Scalar
//================================================================

namespace TimerChannel_ns
{
/*----- PROTECTED REGION ID(TimerChannel::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TimerChannel::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::TimerChannel()
 *	Description : Constructors for a Tango device
 *                implementing the classTimerChannel
 */
//--------------------------------------------------------
TimerChannel::TimerChannel(Tango::DeviceClass *cl, string &s)
 : DetectorChannel(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TimerChannel::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::constructor_1
}
//--------------------------------------------------------
TimerChannel::TimerChannel(Tango::DeviceClass *cl, const char *s)
 : DetectorChannel(cl, s)
{
	/*----- PROTECTED REGION ID(TimerChannel::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::constructor_2
}
//--------------------------------------------------------
TimerChannel::TimerChannel(Tango::DeviceClass *cl, const char *s, const char *d)
 : DetectorChannel(cl, s, d)
{
	/*----- PROTECTED REGION ID(TimerChannel::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TimerChannel::delete_device()
{
	DEBUG_STREAM << "TimerChannel::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TimerChannel::delete_device) ENABLED START -----*/

	//	Delete device allocated objects

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::delete_device
	delete[] attr_preselection_read;
	delete[] attr_value_read;

	if (Tango::Util::instance()->is_svr_shutting_down()==false  &&
		Tango::Util::instance()->is_device_restarting(device_name)==false &&
		Tango::Util::instance()->is_svr_starting()==false)
	{
		//	If not shutting down call delete device for inherited object
		DetectorChannel_ns::DetectorChannel::delete_device();
	}
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TimerChannel::init_device()
{
	DEBUG_STREAM << "TimerChannel::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TimerChannel::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::init_device_before
	
	if (Tango::Util::instance()->is_svr_starting() == false  &&
		Tango::Util::instance()->is_device_restarting(device_name)==false)
	{
		//	If not starting up call init device for inherited object
		DetectorChannel_ns::DetectorChannel::init_device();
	}
	//	No device property to be read from database
	
	attr_preselection_read = new Tango::DevDouble[1];
	attr_value_read = new Tango::DevDouble[1];
	/*----- PROTECTED REGION ID(TimerChannel::init_device) ENABLED START -----*/

	//	Initialize device
	attr_preselection_read[0] = 0.;
	attr_value_read[0] = 0.;

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::init_device
}


//--------------------------------------------------------
/**
 *	Method      : TimerChannel::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TimerChannel::always_executed_hook()
{
	DEBUG_STREAM << "TimerChannel::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TimerChannel::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests
	DetectorChannel::always_executed_hook();

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TimerChannel::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TimerChannel::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TimerChannel::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TimerChannel::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void TimerChannel::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TimerChannel::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TimerChannel::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute preselection related method
 *	Description: Preset time value.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimerChannel::read_preselection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimerChannel::read_preselection(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimerChannel::read_preselection) ENABLED START -----*/
	//	Set the attribute value
	if (!m_interface)
		::Tango::Except::throw_exception("Runtime error",
						 "Control interface not initialized",
						 "TimerChannel::read_preselection()");
	attr_preselection_read[0] = m_interface->preSelection(TCT);
	attr.set_value(attr_preselection_read);

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::read_preselection
}
//--------------------------------------------------------
/**
 *	Write attribute preselection related method
 *	Description: Preset time value.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimerChannel::write_preselection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TimerChannel::write_preselection(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TimerChannel::write_preselection) ENABLED START -----*/

	if (!m_interface)
		::Tango::Except::throw_exception("Runtime error",
						 "Control interface not initialized",
						 "TimerChannel::write_preselection()");
	ERROR_STREAM << "write_preselection " << w_val;
	m_interface->setPreSelection(TCT, w_val);

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::write_preselection
}
//--------------------------------------------------------
/**
 *	Read attribute value related method
 *	Description: Current time value.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimerChannel::read_value(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TimerChannel::read_value(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TimerChannel::read_value) ENABLED START -----*/
	//	Set the attribute value

	if (!m_interface)
		::Tango::Except::throw_exception("Runtime error",
						 "Control interface not initialized",
						 "TimerChannel::read_value()");
	attr_value_read[0] = m_interface->readCounter(TCT);
	attr.set_value(attr_value_read);

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::read_value
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimerChannel::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TimerChannel::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TimerChannel::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TimerChannel::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TimerChannel::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	TimerChannel::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TimerChannel::namespace_ending) ENABLED START -----*/

//	Additional Methods
//--------------------------------------------------------
/**
 *	Read attribute active related method
 *	Description: If this channel can finish the measurement when preselection is reached.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimerChannel::read_active(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DetectorChannel::read_active(Tango::Attribute &attr) entering... " << endl;
	//	Set the attribute value
	if (!m_interface)
		::Tango::Except::throw_exception("Runtime error",
						 "Control interface not initialized",
						 "TimerChannel::read_active()");
	attr_active_read[0] = isMaster();
	attr.set_value(attr_active_read);

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::read_active
}
//--------------------------------------------------------
/**
 *	Write attribute active related method
 *	Description: If this channel can finish the measurement when preselection is reached.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TimerChannel::write_active(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "DetectorChannel::write_active(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(DetectorChannel::write_active) ENABLED START -----*/
	if (!m_interface)
		::Tango::Except::throw_exception("Runtime error",
						 "Control interface not initialized",
						 "TimerChannel::write_active()");
	m_interface->selectCounter(TCT, w_val, m_interface->preSelection(TCT));
	attr_active_read[0] = isMaster();

	/*----- PROTECTED REGION END -----*/	//	DetectorChannel::write_active
}

bool TimerChannel::isMaster(void)
{
	return bool(m_interface->counterSelected(TCT));
}

/*----- PROTECTED REGION END -----*/	//	TimerChannel::namespace_ending
} //	namespace
