/*!
  \page functional_descriptions Functional descriptions

  \tableofcontents

All commands are used to control properties and behaviour of two main targets:
 - The peripheral modules MPSD and MDLL
 - The central modules MCPD

While MPSD and MDLL have only few parameters to control, MCPD is far more complex.
Both are controlled by sending UDP base command buffers to the MCPD. Commands 
for MPSD and MDLL are translated in the central module MCPD and transmitted over
the serial connections.

\section mpsd_function MPSD

Each MPSD has 8 dual amplification stages. The gain values are kept symmetric
internally, so there's one gain value for each MPSD channel.

One common lower threshold for all eight channels allows neutron/gamma discrimination.

A built in test pulser is useful for remote electronics check without the need 
for neutron signals. Charge is injected at the preamp input, so the complete 
amplification, discrimination, and position calculation process can be checked.

The pulser signal can set to each of the 8 channels and can be varied in 
amplitude (energy) and position.

Thus, a MPSD has the following parameters to be controlled remotely:

Amplification and discrimination unit:
 - 8 gain values (8 bit, 0 .. 255)
 - 1 common lower threshold value (8 bit, 0 .. 255)

Test pulser unit:
 - 1 amplitude (8 bit, 0 .. 255)
 - 1 channel within module (0 .. 7)
 - 1 position within channel (left, middle, right)
 - on/off

\section mstd_function MSTD

\section mdll_function MDLL

\section mpcd_function MCPD

The central processing module MCPD offers the following group of properties/
function modules:

\subsection address_and_comm_parameters Address and communication parameters

\subsubsection device_id Device ID

Each MCPD in a system is given a device ID that is used for all communication.
The device ID can be set individually during the initialisation and is <b>remembered
after power up</b>. It is in the responsibility of the user to keep IDs unique.

\subsubsection device_ip_address Device IP address

The IP address of the MCPD, also <b>stored permanently</b>, can be set to every
valid IP address. A "panic button" inside the MCPD allows to reset the address 
to the default value of 192.168.168.121.

\subsubsection data_host_ip_address Data host IP address

The MCPD is able to send data buffers to a dedicated DAQ computer, which may have
a different address from computer sending and receiving commands and its answers
resp., to split up data taking and control tasks. This address can be preset and
is <b>remembered after power up</b>.

\subsubsection udp_port_numbers UDP port numbers

UDP port number for command and data buffers can be set to a desired value.
Values are <b>saved permanently</b>. If not set, the port number of the last
command packet is used...

\subsection timing_parameters Timing parameters

\subsubsection timing_master Timing master

A flag to define whether a MCPD operates a timing master or slave.

\subsubsection master_clock Master clock

Master timing register (48 bit), can be set to any values and is incremented
every 100 ns during data acquisition.

\subsubsection termination_of_sync_line Termination of sync line

Timing sync line has to be terminated a each end of the sync line chain. The
master automatically terminates the sync line whereas the last timing slave 
has to be terminated. 

\note In case of more than 1 timing slave <b>only one</b> has to be set to terminate 
the sync line.

\subsection general_properties General properties

\subsubsection run_id Run ID

An arbitrary 16 bit value to identify the current rund. Value is transmitted in
every data buffer header. 
\note Run ID value of the master MCPD will be propagated via sync bus to the
timing slave MCPD.

\subsection functional_units Functional units

Bisides the aggregation of neutron event data, MCPD can contribute own data 
originating from 6 digital (TTL) and 2 analogue inputs.

To process these external signals, it provides functional units for triggering,
counting, and AD/DA conversion.

An MCPD offers a total of:
 - 4 auxiliary timers (16 bit wide, 10 &mu;s time base, 655 ms max. period)
 - 6 triggerable counter cells (21 bit wide)
 - 2 triggerable ADC cells (12 bit, +/-4.5V or 0 .. 9V)
 - 4 multi-purpose counter (48 bit)
 - 2 DAC ports (12 bit, +/-3V or 0 .. 6V, depending on jumper setting inside MCPD)
 - 1 RS-232 serial port (default configuration: 9600,8N1) can be used to control
   /read out external devices (HV sources, sample environment, ... ). Strings can
   be sent and answers read back

\subsubsection auxiliary_timers Auxiliary timers

Besides the central TOF (time of flight) timing unit, the MCPD has 4 auxiliary 
timer units that are intented as trigger sources for auxiliary event triggering.

Each auxiliary timer is a possible trigger source for one of the 6 counter cells
or one of the 2 ADC cells. 

Triggering a counter of an ADC cell leads to the generation of a trigger event.
A trigger event is a timestamped entry in data stream, comparable to a neutron
data event. It carries the according counter value or ADC valued together with 
the precise 19 bit timestamp. Auxiliary event data format is described 
\ref trigger_data_event "here".

The auxiliary timers are reset automatically at DAQ start or reset. The have a 
time base of 10 &mu;s and a width of 16 bit, leading to a maximum period of 
655.36 ms.

A capture register associated with each timer defines the value at which the
timer unit triggers the associated event(s).

Every time the capture register equals the timer, a trigger is generated and the
timer is reset. This it is possible to generate a trigger with a period between
10 &mu;s and 655.36 ms.

Timers are assigned to their data sources in the counter/ADC control registers.
One timer can trigger more than one data source.

Auxiliary timers do not stop ad DAQ stop. This enables e.g. a continuous transfer
of ADC data when waiting for a change in sample environment.

Auxiliary timer configuration is done by \ref cmd_10 command, the only
parameter to submit is the capture register value.

\subsubsection counter_cells Counter cells

Counter cells can be used e.g. for monitor counters, chopper inputs, auxiliary
timing purposes, and more.

The can be used as simple counters and are also able to generate timestamped events
within the data stream.

They operate like shown schematically below:

\image html counter_cells.png

\subsubsection inputs Inputs

Each counter cell is driven by one dedicated TTL input. The assignment of input
and counter cell is defined by hardware as follows:

<table>
<tr> <th>Cell No.</th> <th>Input</th> </tr>
<tr> <td>0 </td> <td>Monitor/Chopper 1 </td> </tr>
<tr> <td>1 </td> <td>Monitor/Chopper 2 </td> </tr>
<tr> <td>2 </td> <td>Monitor/Chopper 3 </td> </tr>
<tr> <td>3 </td> <td>Monitor/Chopper 4 </td> </tr>
<tr> <td>4 </td> <td>TTL input 1 </td> </tr>
<tr> <td>5 </td> <td>TTL input 2 </td> </tr>
</table>

4 &times; Monitor/Chopper on the frontpanel

2 &times; Digital/TTL input on the backpanel

\subsubsection counters Counters

Each cell has a 21 bit counter cell which increments on the rising edge of the TTL
input signal. There are two possibilities to read out the counters:
 - Counter values can be copied into each transmitted data buffer header by defining
   them as a source for a so called \ref parameter "parameter"
   
   (Please refer to the \ref header_data_dictionary "data buffer header description",
   as well as to the \ref {} "parameter command description" for details.)

   Thus they are transmitted whenever a data buffer is transmitted (which is every
   40 ms minimum).

   Parameters are latched at the time of buffer creation, so their values have the
   same timestamp as the header.

   This operating mode is intended e.g. for continuous transmission of counter
   values, where a precise readout frequency or single event detection is not 
   the issue. (e.g. monitor counters)

 - Counters can be configured to emit a timestamped trigger eventd, based on 
   several trigger sources. When triggered, the latched values of the main timer
   (19 bit) and the counter (21 bit) are - together with some operational 
   information - written into a trigger event like described \ref trigger_data_event 
   "here". The trigger event is then immediately buffered whithin the current
   data buffer. 

   This operating mode is intended for counter sources where detection and 
   timestamping of single events (e.g. choppers), counter overflows (stop on
   monitor counts, ... ) or a precise readout timing is required.

Both operating modes can be combined (e.g. configuring a monitor counter as a
parameter source <em>and</em> as a trigger event source.

\subsubsection triggering Triggering

Event trigger sources for a counter cell can be:

<table>
<tr> <th> Trigger ID </th> <th> Trigger source </th> </tr>
<tr> <td> 0 </td> <td> No Trigger (only counting) </td> </tr>
<tr> <td> 1 </td> <td> Auxiliary timer 1 </td> </tr>
<tr> <td> 2 </td> <td> Auxiliary timer 2 </td> </tr>
<tr> <td> 3 </td> <td> Auxiliary timer 3 </td> </tr>
<tr> <td> 4 </td> <td> Auxiliary timer 4 </td> </tr>
<tr> <td> 5 </td> <td> TTL input 1 (rear panel)</td> </tr>
<tr> <td> 6 </td> <td> TTL input 2 (rear panel)</td> </tr>
<tr> <td> 7 </td> <td> Compare register (allows also self triggering) </td> </tr>
</table>

Using one of the auxiliary timers as trigger source will lead to generation of 
trigger events with a frequency defined by the auxiliary timer.

Digital inputs will count and trigger on the rising edge of the TTL input signals.

Triggering by "Compare register" has 3 different operation modes:
 - writing a value from 0 .. 20 triggers whenever the bit specified by the given
   value becomes "1". For example: a compare register with value of "0" will lead
   to triggering every second count, "2" triggers every 8th count, ... .
 - A compare register value of 21 triggers on counter overflow
 - A compare register value of 22 (as a special value) triggers on every rising
   edge on the input

Triggering on every rising edge for example allows to generate timestamped chopper
signals.

Configuring a counter/ADC cell just requires setting two values for the respective
cell address:
 - trigger source
    - 0 : no trigger
    - 1 .. 4 : trigger on auxiliary timer 1 .. 4
    - 5 .. 6 : trigger on rising edge at rear TTL input 1 .. 2
    - 7 : trigger from compare register (only for counter cells)
 - compare register (numerical value n)
    - 0 .. 20 : trigger on bit n = 1
    - 21 : trigger on counter overflow
    - 22 : trigger on rising edge of input (can be left blank for ADC cells)

This setup is done using \ref {} . 

\subsubsection adc_cells ADC cells

ADC cells operate principally similar to the counter cells. Theirs data have 8 bit
resolution (which are extented by 9 leading zeros to keep the data format compatible).
Full range is +/-4.5 V or 0 .. 9 V, depending on jumper setting inside MCPD.

The can be used e.g. for a continuous monitoring of ambient parameters as well
as of sample environment. The ADC values are stored in registers at a sampling
rate of 25 kHz they can be read out randomly at any time and rate (although 
their content will only change with 25 kHz).

\image html adc_cells.png

Inputs are the 2 analogue inputs on the backpanel.

The ADC cells can be triggered by:
 - one of the 4 programmable auxiliary timers
 - one of the 2 digital inputs on the backpanel

\subsubsection multi_purpose_counters Multipurpose counters ("Parameters")

MCPD offers 4 additional 48 bit wide multipurpose counters/data fields.

Their values are automatically transmitted as parameter 0 .. 3 with every
data buffer.

Data buffers will be emitted whenever an event buffer is full, but with a
minimum frequency of 25 Hz. So the multipurpose counters are a good means for
a continuous monitoring of counting inputs.

All 6 TTL inputs can operate as counter source:
 - 4 &times; Monitor/Chopper on the frontpanel
 - 2 &times; Digital input on the backpanel

Furthermore, a parameter field can carry a copy of one of the following 
information:
 - Event counter
 - Master clock
 - Current status of all digital inputs and ADCs

Parameter 0 and 1 will stop on stop command and will continue/updata on a
continue command. Parameter 2 and 3 will run continuously.

The assignment of the parameters is by \ref {}:

Each one of the 4 possible parameters can be assigned one of the following
sources:
 - 0 .. 3 : Monitor/Chopper inputs 1 .. 4
 - 4 .. 5 : backpanel TTL inputs 1 .. 2
 - 6 : combination of all digital inputs and both ADC values
 - 7 : event counter
 - 8 : master clock

\subsubsection counter_port_status_polling Counter/port status polling

As last means to derive counter values and port status from MCPD, there's a
polling command that derives all possible data sources in one command answer
buffer:
 - Parameter 0 .. 3
 - 6 digital inputs
 - 2 digital outputs
 - 2 ADC inputs
 - 2 DAC outputs

*/
