/*!
  \page system_description System description

  \tableofcontents

  \section system_overview Overview

\note Before starting with an overview it has to be explained that the manual
      considers the MDLL module as a combination of a MCPD and the MDLL whereas it
      is mounted in a single module. For the understanding of the architecture it
      makes no difference. If this manual talks about the MCPD it is assumed the 
      MCPD part, if the MDLL part is called the not MCPD part is taken to account



  \section system_layout System layout

This system layout may be splitted in to different layouts:
 - \ref psd_system_layout "PSD readout system" with a log of separate position sensitive detector tubes
 - \ref mdll_system_layout "MDLL readout system" for area detectors with delayline readout

In principle both setups may combined, but it's uncommon (at the moment)

  \subsection psd_system_layout PSD+ system layout

  The mesytec PSD+ is a readout system for experiments with medium to large 
numbers of position sensitive neutron detectors. 

It provides highly precise TOF timing and allows the integration of trigger
sources like monitor counters, chopper signals, ...

All events carry a 48 bit wide time stamp with 100 ns timing resolution.

One or more central units collect all neutron data as well as auxiliary signals
from  monitor counters, chopper systems and environmental sensors.

The peripheral units, resposible for (pre-)amplification, position calculation
of the neutron events as well as for basic testing can be controlled remotely.

The following picture schows a general setup as an example:

\image html general_setup_example.png "" width="100%"

Up to 8 position sensitive detector tubes are connected to one periperal module
MPSD-8(+). The calculated event positions are transmitted on a point-to-point
bus connection to the central modules MCPD.

An MCPD-8 can serve up to 8 peripherals (= 64 detectors).

Data are collected and bufferd in the MCPD and transmitted to one or more
control and DAQ computers. 

The communication uses UDP/IP on a 100 Mbit/s Ethernet connection.

   \subsection mdll_system_layout MDLL system layout

The MDLL module is an integrated readout module for multi wire proportional 
counters with two delay lines. It is a compact combination of analogue readout 
electronics a MCPD like network interface.

The position is determined from the delay of the signals from the two ends
of a delay line. An anode signal is needed to start the signal processing.

It includes the discriminators (CFD's) and so allows direct processing of 
detector signals after amplification (input level -1V).

<b>Features of MDLL</b>
 - X and Y position calculation
 - Anode amplitude is converted and available for adjustment
 - Register adjustable to detector delays from 100 ns to 500 ns
 - Listmode with time stamped events (100 ns resolution)
 - Accecpt -1V analogue detector pulses, rise time typ. 10 ns to 35 ns.
   (CFD-delays can be selected with jumpers)

   \subsection main_components Main components

mesytec PSD(+)/MDLL systems consist of three principal components

- <b>"Periperal modules" like MPSD-8(+)/MDLL</b>

  They interface to the detectors, do the analogue signal processing, calculate
  energies and positions, generate digital data on positions and a differential
  timing. They have several parameters (gains, thresholds, test pulsers, ...)
  that may be controlled remotely.
 
  Data communication takes place on a dedicated high speed serial interface
  between peripheral and central modules.

  \image html mpsd_schema.png

- <b>Central module MCPD</b>

  They are responible for data buffering, control of, and communication with
  peripheral modules. They are the interface to the data acquisition and control
  computer(s).

  Data communication takes place on the high speed serial interface towards the
  peripheral modules and on a 100 Mbit/s Ethernet connection towards the DAQ
  computers.

  The communication with the MCPD via UDP/IP protocol is the way to control all
  system parameters.

  \image html mcpd_schema.png

- <b>Data acquisition and control computers</b>

  At least one computer is requiered in order to control the PSD(+) system and
  to collect the data generated by the peripheral modules.

  Communciation takes place between computer and central module, allowing also 
  to control the peripheral module parameters.

  \image html general_setup_example_2.png

\subsection possible_setups Possible setups

The range of possible setups stretches from the minimum system, with one peripheral
module MPSD/MDLL, one central module MCPD and one PC to large systems with multiple
fully equipped MCPD branches - each serving 64 detectors on 8 MPSD.

One MPCD can handle up to 8 peripheral modules. Communication takes place on a 
deterministic point-to-point connection, allowing highest data rates. This setup
is recommended for instruments with high event rates and demand for lowest possible
deadtimes.

Several MCPD can be combined to realize a readout system meeting the requirements
regarding number of detectors, data rates, and deadtime limits.

At least one data acquisition and control computer is needed to perform three
main tasks:
 - control the peripheral settings (like gains, thresholds, test pulser, ... )
 - collect and store incoming raw data
 - preprocess and display event data for online monitoring

In larger setups with high data rates, it can be a good decision to split the
tasks, one computer for control and online monitoring plus separate computers
for data collection and storing may be a good distribution.

\subsection communication_protocols Communication protocols

There are 2 protocols used among the mesytec PSD/DLL systems:
 - A proprietary protocol on the hight speed serial interfaces from peripheral
   to central modules. MCPD serves as an interface between the control PC and
   the bus protocol
 - A protocol using the standardized UDP/IP protocol on Ethenet for the 
   communication between central modules and computers. This protocol will be
   called \ref mesytec_protocol "mesytec protocol" in the following.
 */
